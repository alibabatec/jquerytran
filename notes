jQuery Get/set

.html() -> raw html
.text() -> comilted  text
.val() -> input text box value

.append() .appendTo() .prepend() .after() .before() .remove() .empty()

With .append(), the selector expression preceding the method is the container into which 

the content is inserted. With .appendTo(), on the other hand, the content precedes the 

method, either as a selector expression or as markup created on the fly, and it is 

inserted into the target container.





jQuery Selectors

attr = 'xyz' 
attr != 'xyz'
attr ^= 'xyz'
attr $= 'xyz'
attr *= 'xyz' -> contains
attr |= 'xyz' -> either whole or begins and separated by -
attr ~= 'xyz' -> contains word



$( ":button" )
$( "form input:checkbox" )
$( "input:checked" )
$( "ul.topnav > li" )  -> direct child of ul.topnav
$( "form input" ) -> all descendants
$( "#myDiv" )
$( ".myClass" ) 
$( "div:contains('John')" ) -> case sensitive, innerHTML match.	The matching text can 

appear directly within the selected element, in any of that element's descendants, or a 

combination thereof. 

$( "div" ) or $('form') -> An element to search for. Refers to the tagName of DOM nodes.


:eq(5), :lt(2), :gt(4), :even, :odd -> Select the element at index n within the matched 

set.


$( "div span:first-child" )
$( "tr:first" )
jQuery( ":focus" ) ->Selects element if it is currently focused.

jQuery( "[attribute]" )  -> Selects elements that have the specified attribute, with any 

value. 

$( "div[id]" ).one( "click", fnx); Using .one() so the handler is executed at most once

var allInputs = $( ":input" );

$( "input[id][name$='man']" ) -> Multiple Attribute Selector [name=”value”]

[name2=”value2"]

$( "div, span, p.myClass" ) -> Selects the combined results of all the specified 

selectors.This multiple expression combinator is an efficient way to select disparate 

elements.

$( "label + input" ).css( "color", "blue" ).val( "Labeled!" ); -> Next Adjacent Selector 

(“prev + next”) -> Selects all next elements matching "next" that are immediately 

preceded by a sibling "prev".


$( "#prev ~ div" )
Selects all sibling elements that follow after the "prev" element, have the same parent, 

and match the filtering "siblings" selector.


The notable difference between (prev + next) and (prev ~ siblings) is their respective 

reach. While the former reaches only to the immediately following sibling element, the 

latter extends that reach to all following sibling elements.


$( "input:not(:checked) + span" )

$( "ul li:nth-child(2)" )


    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });	
The :selected selector works for <option> elements. It does not work for checkboxes or 

radio inputs; use :checked for them.


$( "<input>" ).is( "[type=text]" ); // false
$( "<input>" ).is( ":text" ); // true

filters


$( "li" ).filter( ":even" ).css( "background-color", "red" );
The result of this call is a red background for items 1, 3, and 5, as they match the 

selector (recall that :even and :odd use 0-based indexing).


$( "li" )
  .filter(function( index ) {
    return index % 3 === 2;
  })
    .css( "background-color", "red" );



$( "li" )
  .filter(function( index ) {
    return $( "strong", this ).length === 1;
  })
    .css( "background-color", "red" );